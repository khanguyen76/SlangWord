/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package slangword;

import java.awt.GridLayout;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;
import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class MainFrame extends javax.swing.JFrame {

    SlangWord sw = SlangWord.getInstance();
    DefaultTableModel tableModel;

    public MainFrame() {
        initComponents();
        refreshDataTable();
//        System.out.println(data);
    }

    public void refreshDataTable() {
        Map<String, List<String>> data = sw.getData();
        fillSlangTable(data);
    }

    public void fillSlangTable(Map<String, List<String>> data) {
        tableModel = (DefaultTableModel) tblSlangWord.getModel();
        tableModel.setRowCount(0);
        for (String slang : data.keySet()) {
//            System.out.print(slang);
            for (String meaning : data.get(slang)) {
                tableModel.addRow(new Object[]{tableModel.getRowCount() + 1, slang, meaning});
            }
        }
        tableModel.fireTableDataChanged();
    }

    public void fillHistoryTable(Map<String, List<String>> data) {
        tableModel = (DefaultTableModel) tblHistory.getModel();
        tableModel.setRowCount(0);
        for (String slang : data.keySet()) {
//            System.out.print(slang);
            for (String meaning : data.get(slang)) {
                tableModel.addRow(new Object[]{tableModel.getRowCount() + 1, slang, meaning});
            }
        }
        tableModel.fireTableDataChanged();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        tabDictionary = new javax.swing.JPanel();
        cbxSearchBy = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSlangWord = new javax.swing.JTable();
        btnAddNew = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        tabHistory = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHistory = new javax.swing.JTable();
        tabRandom = new javax.swing.JPanel();
        textSlangRandom = new javax.swing.JLabel();
        btnRandom = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.FlowLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("SLANG WORDS");

        cbxSearchBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Slang", "Definition" }));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblSlangWord.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "No.", "Slang", "Definition"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSlangWord.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblSlangWord);
        if (tblSlangWord.getColumnModel().getColumnCount() > 0) {
            tblSlangWord.getColumnModel().getColumn(0).setMaxWidth(100);
            tblSlangWord.getColumnModel().getColumn(1).setMaxWidth(200);
        }

        btnAddNew.setText("Add new");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabDictionaryLayout = new javax.swing.GroupLayout(tabDictionary);
        tabDictionary.setLayout(tabDictionaryLayout);
        tabDictionaryLayout.setHorizontalGroup(
            tabDictionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(tabDictionaryLayout.createSequentialGroup()
                .addComponent(btnAddNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReset)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(tabDictionaryLayout.createSequentialGroup()
                .addComponent(cbxSearchBy, 0, 176, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch))
        );
        tabDictionaryLayout.setVerticalGroup(
            tabDictionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabDictionaryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabDictionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxSearchBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabDictionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNew)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Dictionary", tabDictionary);

        tabHistory.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                tabHistoryComponentShown(evt);
            }
        });

        tblHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "No.", "Slang", "Definition"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblHistory);
        if (tblHistory.getColumnModel().getColumnCount() > 0) {
            tblHistory.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        javax.swing.GroupLayout tabHistoryLayout = new javax.swing.GroupLayout(tabHistory);
        tabHistory.setLayout(tabHistoryLayout);
        tabHistoryLayout.setHorizontalGroup(
            tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE)
        );
        tabHistoryLayout.setVerticalGroup(
            tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabHistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("History", tabHistory);

        tabRandom.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                tabRandomComponentShown(evt);
            }
        });

        textSlangRandom.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        textSlangRandom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textSlangRandom.setText("SLANG RANDOM");

        btnRandom.setText("Click to random");
        btnRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabRandomLayout = new javax.swing.GroupLayout(tabRandom);
        tabRandom.setLayout(tabRandomLayout);
        tabRandomLayout.setHorizontalGroup(
            tabRandomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabRandomLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textSlangRandom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabRandomLayout.createSequentialGroup()
                .addContainerGap(327, Short.MAX_VALUE)
                .addComponent(btnRandom)
                .addGap(315, 315, 315))
        );
        tabRandomLayout.setVerticalGroup(
            tabRandomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabRandomLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(textSlangRandom)
                .addGap(18, 18, 18)
                .addComponent(btnRandom, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(295, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Random", tabRandom);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("dictionary");
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchBy = cbxSearchBy.getSelectedItem().toString().toLowerCase();
        if (searchBy.equals("slang")) {
            String content = txtSearch.getText();
            Map<String, List<String>> data = sw.findItemByKey(content);
            fillSlangTable(data);
            System.out.print(data.size());
        }
        if (searchBy.equals("definition")) {
            String content = txtSearch.getText();
            Map<String, List<String>> data = sw.findItemByValue(content);
            fillSlangTable(data);
            System.out.print(content);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tabHistoryComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tabHistoryComponentShown
        Map<String, List<String>> data = sw.readHistory();
        fillHistoryTable(data);
    }//GEN-LAST:event_tabHistoryComponentShown

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        JTextField txtSlang = new JTextField(5);
        JTextField txtDefitition = new JTextField(5);

        JPanel myPanel = new JPanel(new GridLayout(0, 1, 5, 5));
        myPanel.add(new JLabel("Slang Word:"));
        myPanel.add(txtSlang);
        myPanel.add(new JLabel("Definition:"));
        myPanel.add(txtDefitition);

        int result = JOptionPane.showConfirmDialog(null, myPanel, "ADD NEW SLANG WORD", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            String slang = txtSlang.getText();
            String defitition = txtDefitition.getText();
            Boolean isDuplicate = sw.checkDuplicate(slang, defitition);
            if (!isDuplicate) {
                sw.addNewSlangWord(slang, defitition);
                refreshDataTable();
            } else {
                Object[] option = {"Overwrite", "Duplicate"};
                JPanel panel = new JPanel();
                panel.add(new JLabel("The word is existed in dictionary. Please enter another word."));
                JOptionPane.showConfirmDialog(null, panel, "Warning: word existed", JOptionPane.OK_CANCEL_OPTION);
            }
        }
    }//GEN-LAST:event_btnAddNewActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int rowSelected = tblSlangWord.getSelectedRow();
        if (rowSelected != -1) {
            String slang = tblSlangWord.getModel().getValueAt(rowSelected, 1).toString();
            JTextField txtDefitition = new JTextField(5);

            JPanel myPanel = new JPanel(new GridLayout(0, 1, 5, 5));
            myPanel.add(new JLabel("Slang Word: " + slang));
            myPanel.add(new JLabel("New definition:"));
            myPanel.add(txtDefitition);

            int result = JOptionPane.showConfirmDialog(null, myPanel, "EDIT SLANG WORD", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

            if (result == JOptionPane.OK_OPTION) {
                String defitition = txtDefitition.getText();
                sw.editSlangWord(slang, defitition);
                refreshDataTable();
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int rowSelected = tblSlangWord.getSelectedRow();
        if (rowSelected != -1) {
            String slang = tblSlangWord.getModel().getValueAt(rowSelected, 1).toString();
            JPanel panel = new JPanel();
            panel.add(new JLabel("The word '" + slang + "' will be removed. Are you sure?"));
            int result = JOptionPane.showConfirmDialog(null, panel, "DELTE SLANG WORD", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                sw.deleteSlangWord(slang);
                refreshDataTable();
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        JPanel panel = new JPanel();
        panel.add(new JLabel("Are you sure want reset dictionary?"));
        int result = JOptionPane.showConfirmDialog(null, panel, "RESET SLANG WORD", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            sw.reset();
            refreshDataTable();
            textSlangRandom.setText("SLANG RANDOM");
        }
    }//GEN-LAST:event_btnResetActionPerformed

    private void showRandomSlangWord () {
        Map<String, List<String>> SlangMap = sw.getData();
        Object key = sw.randomSlangWord();
        List<String> definitions = SlangMap.get(key);
        String strDefinitions = String.join(", ", definitions);
        textSlangRandom.setText(key+": "+strDefinitions);
    }
    
    private void btnRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRandomActionPerformed
        showRandomSlangWord();
    }//GEN-LAST:event_btnRandomActionPerformed

    private void tabRandomComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tabRandomComponentShown
        if(textSlangRandom.getText().equals("SLANG RANDOM")){
            showRandomSlangWord();
        }
    }//GEN-LAST:event_tabRandomComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRandom;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbxSearchBy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel tabDictionary;
    private javax.swing.JPanel tabHistory;
    private javax.swing.JPanel tabRandom;
    private javax.swing.JTable tblHistory;
    private javax.swing.JTable tblSlangWord;
    private javax.swing.JLabel textSlangRandom;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
